var documenterSearchIndex = {"docs":
[{"location":"moves/#Moves","page":"Moves","title":"Moves","text":"","category":"section"},{"location":"moves/","page":"Moves","title":"Moves","text":"There are several operations to change the topology or any of the branch lengths of a tree. The different functions which are available in MCPhyloTree are listed here.","category":"page"},{"location":"moves/","page":"Moves","title":"Moves","text":"While the tree building methods in this package are generally built in a way that ensures that the nodes of the tree are fully initialized, i.e. they have a unique number, binary representation and a height, the move methods listed here do not automatically update these fields. After using these methods you might want to run initialize_tree! or update_tree! to ensure the nodes remain / are initialized.","category":"page"},{"location":"moves/","page":"Moves","title":"Moves","text":"WARNING: Do not run initialize_tree! after changing a tree, if you rely on the num field of the nodes to identify them. The same applies to the method number_nodes that is called in initalize_tree.","category":"page"},{"location":"moves/#Edge-Length","page":"Moves","title":"Edge Length","text":"","category":"section"},{"location":"moves/","page":"Moves","title":"Moves","text":"Modules = [MCPhyloTree]\nPages = [\"Moves/EdgeLength.jl\"]","category":"page"},{"location":"moves/#MCPhyloTree.change_edge_length!-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.change_edge_length!","text":"change_edge_length!(root::T) where T <:AbstractNode\n\nPick a random node and increase or decrease its length randomly.\n\nroot : root node of tree.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.move!-Union{Tuple{T}, Tuple{T, T, Float64}} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.move!","text":"move!(node1::T, node2::T, proportion::Float64) where T <:AbstractNode\n\nChange the incoming length of node1 and node2 while keeping their combined length constant.\n\nnode1 : Node whose inc_length will be modified; this node's inc_length will be the total inc_length of both nodes, times proportion.\nnode2 : Node whose inc_length will be modified; this node's inc_length will be the remainder of total - the new inc_length value of node1.\nproportion : Float64, determines proportion of the inc_length of both nodes assigned to node1.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.slide!-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.slide!","text":"slide!(root::T) where T<:AbstractNode\n\nThis function performs a slide move on an intermediate node. The node is moved upwards or downwards on the path specified by its mother and one of its daughters.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.slide-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.slide","text":"slide(root::T)::T where T<:AbstractNode\n\nThis function performs a slide move on an intermediate node. The node is moved upwards or downwards on the path specified by its mother and one of its daughters.\n\nReturns root Node of new tree.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.swing!-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.swing!","text":"swing!(root::T) where T<:AbstractNode\n\nThis function performs a swing node. A random non-leave node is selected and moved along the path specified by its two children.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.swing-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.swing","text":"swing(root::T)::T where T<:AbstractNode\n\nThis function performs a swing node. A random non-leave node is selected and moved along the path specified by its two children.\n\nReturns root Node of new tree.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"moves/#NNI","page":"Moves","title":"NNI","text":"","category":"section"},{"location":"moves/","page":"Moves","title":"Moves","text":"Modules = [MCPhyloTree]\nPages = [\"Moves/NNI.jl\"]","category":"page"},{"location":"moves/#MCPhyloTree.NNI!-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.NNI!","text":"NNI!(root::T)::Int64  where T<:AbstractNode\n\nThis function does a nearest neighbour interchange (NNI) move on the tree specified by root. The target is identified by the number of the target node.\n\nThe function returns 1 if the move was successful and 0 else.\n\nroot : root node of tree on which to perform the NNI.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.NNI!-Union{Tuple{T}, Tuple{T, Int64, Bool}} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.NNI!","text":"NNI!(root::T, target::Int64)::Int64  where T<:AbstractNode\n\nThis function does a nearest neighbour interchange (NNI) move on the tree specified by root. The target is identified by the number of the target node.\n\nThe function returns 1 if the move was successful and 0 else.\n\nroot : root node of tree on which to perform the NNI.\ntarget : specific node of tree to interchange.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.NNI!-Union{Tuple{T}, Tuple{T, Int64}} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.NNI!","text":"NNI!(root::T, target::Int64)::Int64  where T<:AbstractNode\n\nThis function does a nearest neighbour interchange (NNI) move on the tree specified by root. The target is identified by the number of the target node. The function returns 1 if the move was successfull and 0 else.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.NNI!-Union{Tuple{T}, Tuple{T, T, Bool}} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.NNI!","text":"NNI(root::T, target::T, lor::Bool)::Int64   where T<:AbstractNode\n\nThis function does a nearest neighbour interchange (NNI) move on the tree specified by root. The parameter target specifies the node which performs the interchange move using the left or right child of the target node. If the left child should be used lor=true.\n\nThe function returns 1 if the move was successful and 0 else.\n\nroot : root node of tree on which to perform the NNI.\ntarget : specific node of tree to interchange.\nlor : Bool; \"true\" uses the left child of target, \"false,\" the right child.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.NNI-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.NNI","text":"NNI(root::T)::T  where T<:AbstractNode\n\nThis function does a nearest neighbour interchange (NNI) move on the tree specified by root.\n\nReturns a mutated copy while leaving the original tree intact.\n\nroot : root node of tree on which to perform the NNI.\n\n\n\n\n\n","category":"method"},{"location":"moves/#Randomize","page":"Moves","title":"Randomize","text":"","category":"section"},{"location":"moves/","page":"Moves","title":"Moves","text":"Modules = [MCPhyloTree]\nPages = [\"Moves/Randomize.jl\"]","category":"page"},{"location":"moves/#MCPhyloTree.randomize!-Union{Tuple{T}, Tuple{T, Int64}} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.randomize!","text":"randomize!(root::T, num::Int64=100)::Nothing where T <:AbstractNode\n\nThis function randomizes the tree by performing a number of nearest neighbour interchange (NNI) moves and a randomization of the branch lengths. The number of NNI moves is specified in the parameter num.\n\nroot : root node of tree to be edited.\nnum : amount of NNI moves to perform.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.randomize-Union{Tuple{T}, Tuple{T, Int64}} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.randomize","text":"randomize(root::T, num::Int64=100)::T where T <:AbstractNode\n\nThis function returns a randomized copy of the tree by performing a number of nearest neighbour interchange (NNI) moves and a randomization of the branch lengths. The number of NNI moves is specified in the parameter num. \n\nroot : root node of tree to be edited.\nnum : amount of NNI moves to perform.\n\n\n\n\n\n","category":"method"},{"location":"moves/#Rerooting","page":"Moves","title":"Rerooting","text":"","category":"section"},{"location":"moves/","page":"Moves","title":"Moves","text":"Modules = [MCPhyloTree]\nPages = [\"Moves/Rerooting.jl\"]","category":"page"},{"location":"moves/#SPR","page":"Moves","title":"SPR","text":"","category":"section"},{"location":"moves/","page":"Moves","title":"Moves","text":"Modules = [MCPhyloTree]\nPages = [\"Moves/SPR.jl\"]","category":"page"},{"location":"moves/#MCPhyloTree.SPR!-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.SPR!","text":"SPR!(root::T)::T where T <:AbstractNode\n\nPerforms SPR on tree in place. Takes reference to root of tree; Returns reference to root of altered tree. Throws error if tree is improperly formatted.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.SPR-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.SPR","text":"function SPR(original_root<:AbstractNode)\n\nPerforms SPR on tree. Takes a copy of root of the tree; Returns a copy of root of altered tree. Throws error if tree is improperly formatted.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.perform_spr-Tuple{T} where T<:GeneralNode","page":"Moves","title":"MCPhyloTree.perform_spr","text":"perform_spr(root::T) where T <: GeneralNode\n\nperforms SPR on binary tree. Returns root of tree post-SPR.\n\nroot : Node of tree on which to perform SPR.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.perform_spr-Union{Tuple{T}, Tuple{T, T, T}} where T<:GeneralNode","page":"Moves","title":"MCPhyloTree.perform_spr","text":"perform_spr(root::T,subtree::T,target::T) where T <: GeneralNode\n\nperforms SPR on binary tree. Returns root of tree post-SPR.\n\nroot : Node of tree on which to perform SPR.\nsubtree   : Root of subtree to be moved.\ntarget    : Target of SPR.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.perform_spr-Union{Tuple{T}, Tuple{T, T}} where T<:GeneralNode","page":"Moves","title":"MCPhyloTree.perform_spr","text":"perform_spr(root::T,subtree::T) where T <: GeneralNode\n\nperforms SPR on binary tree. Returns root of tree post-SPR.\n\nroot : Node of tree on which to perform SPR.\nsubtree   : Root of subtree to be moved.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.risky_SPR!-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.risky_SPR!","text":"    risky_SPR!(root<:AbstractNode)\n\nPerforms SPR on tree in place. Returns reference to root of altered tree. Does not check for correct formatting of tree.\n\nroot : root node of tree.\n\n\n\n\n\n","category":"method"},{"location":"moves/#MCPhyloTree.risky_SPR-Tuple{T} where T<:AbstractNode","page":"Moves","title":"MCPhyloTree.risky_SPR","text":"function risky_SPR(original_root::T)::T where T<:AbstractNode\n\nPerforms SPR on tree in place. Takes reference to root of tree Returns copy of root of altered tree. Does not check for correct formatting of tree.\n\n\n\n\n\n","category":"method"},{"location":"distance/#Distance","page":"Distance","title":"Distance","text":"","category":"section"},{"location":"distance/","page":"Distance","title":"Distance","text":"MCPhyloTree.RF\nMCPhyloTree.RF_weighted\nMCPhyloTree.geodesic\nMCPhyloTree.BHV_bounds\nMCPhyloTree.get_bipartitions","category":"page"},{"location":"distance/#MCPhyloTree.RF","page":"Distance","title":"MCPhyloTree.RF","text":"RF(tree1::T, tree2::T)::Int64 where T <:AbstractNode\n\nCalculate the Robinson-Foulds distance between the two trees. In its current form the function assumes the trees have identical leave sets.\n\nReturns result of algorithm as integer.\n\ntree1 : tree used to determine RF distance.\ntree2 : tree used to determine RF distance.\n\n\n\n\n\n","category":"function"},{"location":"distance/#MCPhyloTree.RF_weighted","page":"Distance","title":"MCPhyloTree.RF_weighted","text":"RF_weighted(tree1::T, tree2::T)::Float64 where T <:AbstractNode\n\nCalculate the weighted Robinson-Foulds distance between the two trees. The raw Robinson-Foulds distance is weighted by the maximum distance between the trees. In its current form the function assumes the trees have identical leave sets.\n\nReturns result of algorithm as integer.\n\ntree1 : tree used to determine RF distance.\ntree2 : tree used to determine RF distance.\n\n\n\n\n\n","category":"function"},{"location":"distance/#MCPhyloTree.geodesic","page":"Distance","title":"MCPhyloTree.geodesic","text":"geodesic(tree1::T, tree2::T)::Float64 where T<:GeneralNode\n\nThis function calculates and returns the geodesic distance between two trees.\n\ntree1 : root node of the first tree.\ntree2 : root node of the second tree.\nverbose: If set to 'true', prints the common edge and the leaf contribution.\n\nThe GTP algorithm computing the geodesic distance is closely adapted from the Java  implementation of that same algorithm by Megan Owen and J. Scott Provan.\n\n(M. Owen and J.S. Provan. A fast algorithm for computing geodesic distances in tree space.  IEEE/ACM Transactions on Computational Biology and Bioinformatics, 8:2-13, 2011.) \n\n\n\n\n\n","category":"function"},{"location":"distance/#MCPhyloTree.BHV_bounds","page":"Distance","title":"MCPhyloTree.BHV_bounds","text":"BHV_bounds(tree1::T, tree2::T)::Tuple{Float64, Float64} where T <:AbstractNode\n\nThis function calculates the lower and upper bounds of the geodesic in the Billera-Holmes-Vogtman space.\n\nReturns tuple of floats.\n\n\n\n\n\n","category":"function"},{"location":"distance/#MCPhyloTree.get_bipartitions","page":"Distance","title":"MCPhyloTree.get_bipartitions","text":"get_bipartitions(tree::T)::Vector{Tuple} where T <:AbstractNode\n\nGet a vector of all bipartions of tree.\n\nReturns a vector containing tuples of sets representing the bipartitions.\n\n\n\n\n\n","category":"function"},{"location":"basics/#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"This section provides an overview over the basic functionalities offered.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"When building / modifying trees with methods like add_child! or insert_node!, it might be necessarry to run initialize_tree! or update_tree! to ensure the nodes remain /are initialized.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"WARNING: Do not run initialize_tree! after changing a tree, if you rely on the num field of the nodes to identify them. The same applies to the method number_nodes that is called in initalize_tree.","category":"page"},{"location":"basics/#Basic-Tree-Functionalities","page":"Basics","title":"Basic Tree Functionalities","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Modules = [MCPhyloTree]\nPages   = [\"Basics/Tree_Basics.jl\"]\nFilter =","category":"page"},{"location":"basics/#MCPhyloTree.add_child!-Union{Tuple{N}, Tuple{N, N, Int64}} where N<:GeneralNode","page":"Basics","title":"MCPhyloTree.add_child!","text":"function add_child!(mother_node::N, child::N, child_position::Int64)::Nothing where N <: GeneralNode\n\nThis function adds a child to the mother node. The arity of the mother node is increased by 1 and the root status of the child is set to False.\n\nmother_node : Node to add a child to.\nchild : Node to add to mother_node.children.\nchild_position : index at which to add the new child node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.add_child!-Union{Tuple{N}, Tuple{N, N}} where N<:GeneralNode","page":"Basics","title":"MCPhyloTree.add_child!","text":"add_child!(mother_node::N, child::N)::Nothing where N <: GeneralNode\n\nThis function adds a child to the mother node. The arity of the mother node is increased by 1 and the root status of the child is set to False.\n\nmother_node : Node to add a child to.\nchild : Node to add to mother_node.children.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.check_binary-Tuple{AbstractNode}","page":"Basics","title":"MCPhyloTree.check_binary","text":"check_binary(root::AbstractNode)::Bool\n\nchecks to see if given tree is binary; returns true if properly formatted and false otherwise\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.check_leafsets-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.check_leafsets","text":"check_leafsets(trees::Vector{T})::Nothing where T<:AbstractNode\n\nChecks if an array of trees shares the same leafset (based on the leaf names)\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.delete_node!-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.delete_node!","text":"delete_node!(node::T)::Nothing where T<:AbstractNode\n\nThis functions deletes node from a tree and assigns all its children to its mother node.\n\nnode : Node to be deleted.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.force_ultrametric!-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.force_ultrametric!","text":"force_ultrametric!(root::T) where T<:AbstractNode\n\nForce an ultrametric version of the tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.get_branchlength_vector-Tuple{N} where N<:AbstractNode","page":"Basics","title":"MCPhyloTree.get_branchlength_vector","text":"get_branchlength_vector(root::N)::Vector{T}  where {N <:AbstractNode, T<:Real}\n\nGet the vector of branch lengths of the tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.get_branchlength_vector-Union{Tuple{T}, Tuple{N}, Tuple{N, Vector{T}}} where {N<:AbstractNode, T<:Real}","page":"Basics","title":"MCPhyloTree.get_branchlength_vector","text":"get_branchlength_vector(root::N, out_vec::Vector{T}) where {N<:AbstractNode, T<:Real}\n\nDo post order traversal to retrieve a vector of branch lengths.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.get_mother-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.get_mother","text":"get_mother(node::T)::T  where T<:AbstractNode\n\nThis function gets the mother of node. It does so by looking for the respective binary representation of the mother node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.get_sister-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.get_sister","text":"get_sister(node::T)::T  where T<:AbstractNode\n\nThis function gets the sister of node. It does so by looking for the respective binary representation of the sister.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.get_sum_seperate_length!-Union{Tuple{AbstractNode{T}}, Tuple{T}} where T<:Real","page":"Basics","title":"MCPhyloTree.get_sum_seperate_length!","text":"get_sum_seperate_length!(post_order::Vector{T})::Vector{Float64}  where T<:AbstractNode\n\nThis function gets the sum of the branch lengths of the internal branches and the branches leading to the leave nodes.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.initialize_tree!-Tuple{GeneralNode}","page":"Basics","title":"MCPhyloTree.initialize_tree!","text":"initialize_tree!(root::GeneralNode; height::Bool=true)\n\nThis function initializes a tree, i.e. numbers its nodes and sets the binary + height  fields.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.insert_node!-Union{Tuple{T}, Tuple{T, Vector{T}}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.insert_node!","text":"insert_node!(mother::T, children::Vector{T})::T where T<:AbstractNode\n\nThis function inserts a node into a tree after a mother node and gains a subset of the mother's children as its children.\n\nReturns the inserted node.\n\nmother : Node under which to add the newly-inserted node.\nchildren : Children of node referenced by \"mother\" to reassign as children of the newly-inserted node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.node_age-Tuple{GeneralNode}","page":"Basics","title":"MCPhyloTree.node_age","text":"function node_age(node<:AbstractNode)::Float64\n\nCalculates the age of a node. If the tree is ultrametric then the node age is identical  to the node height. It is calculated by subtracting the path length between the node &  the root from the height of the root. This represents the age of the node, assuming the  leaf farthest from the root has a node age of 0, and the root node is the 'oldest' node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.node_depth-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.node_depth","text":"node_depth(node::T)::Int64 where T<:AbstractNode\n\nCalculate the depth of a node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.node_height-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.node_height","text":"function node_height(root::T)::Nothing where T<:AbstractNode\n\nCalculate the height of a node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.number_nodes!-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.number_nodes!","text":"number_nodes!(root::T)::Nothing  where T<:AbstractNode\n\nThis function assigns a unique, sequential number to each node. Leaves are numbered first in alphabetical order.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.path_length-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.path_length","text":"path_length(ancestor::T, descendant::T)::Float64  where T<:AbstractNode\n\nNote: The function assumes there is an ancestral relationship between the two nodes.\n\nThis function calculates the length of the path separating the ancestor from the offspring node. The function follows the path specified through the binary description of the node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.random_node-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.random_node","text":"random_node(root::T)::T  where T<:AbstractNode\n\nThis function returns a random node from the tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.remove_child!-Union{Tuple{N}, Tuple{N, Bool}} where N<:GeneralNode","page":"Basics","title":"MCPhyloTree.remove_child!","text":"remove_child!(mother_node::N, left::Bool)::N where N <: GeneralNode\n\nThis function removes a child from the list of nodes which are daughters of this node. An input of \"True\" removes the left child, while \"False\" removes the right child.\n\nReturns the removed node.\n\nmother_node : Node from which to remove a child.\nleft : boolean value determining which child of mother_node to remove.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.remove_child!-Union{Tuple{N}, Tuple{N, N}} where N<:AbstractNode","page":"Basics","title":"MCPhyloTree.remove_child!","text":"remove_child!(mother_node::N, child::N)::N where N<:AbstractNode\n\nThis function removes a child from the list of nodes which are daughters of this node.\n\nThe removed node is returned.\n\nmother_node : Node from which to remove a child.\nchild : specific Node to remove. This node has to be a child of mother_node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.set_binary!-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.set_binary!","text":"set_binary!(root::T)  where T <: GeneralNode\n\nAssign a binary representation to each node, which specifies the path from the root to this node via the binary representation of the node. A left turn is a 1 in binary and a right turn a 0.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.set_branchlength_vector!-Union{Tuple{T}, Tuple{N}, Tuple{N, Array{T, N} where N}} where {N<:AbstractNode, T<:Real}","page":"Basics","title":"MCPhyloTree.set_branchlength_vector!","text":"set_branchlength_vector!(root::N, blenvec::Array{T}) where {N<:AbstractNode, T<:Real}\n\nThis function sets the branch lengths of a tree to the values specified in blenvec.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.tree_height-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.tree_height","text":"tree_height(root::T)::Float64  where T<:AbstractNode\n\nThis function calculates the tree height.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.tree_length-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.tree_length","text":"tree_length(root::T)::Float64  where T<:AbstractNode\n\nThis function calculates the tree length.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.tree_length-Union{Tuple{T}, Tuple{T, Float64}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.tree_length","text":"tree_length(root::T, tl::Float64)::Float64 where T<:AbstractNode\n\nThis function does the internal tree length recursion\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.update_tree!-Tuple{GeneralNode}","page":"Basics","title":"MCPhyloTree.update_tree!","text":"update_tree!(root::GeneralNode)\n\nThis function can be used to recompute the tree's binary and height values. This might be  necessary after adding/moving/removing nodes.\n\n\n\n\n\n","category":"method"},{"location":"basics/#Tree-Pruning","page":"Basics","title":"Tree Pruning","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Modules = [MCPhyloTree]\nPages = [\"Basics/Tree_Pruning.jl\"]","category":"page"},{"location":"basics/#MCPhyloTree.prune_tree!-Union{Tuple{T}, Tuple{T, Vector{String}}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.prune_tree!","text":"prune_tree!(root::T, node_names::Vector{String})::Nothing where T<:AbstractNode\n\nIn-place version of prune_tree.\n\nroot : root Node of tree to prune.\nnode_names : vector of strings, used to specify nodes to remove.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.prune_tree!-Union{Tuple{T}, Tuple{T, Vector{T}}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.prune_tree!","text":"prune_tree!(root::T, node_names::Vector{T})::Nothing where T<:AbstractNode\n\nIn-place version of prune_tree.\n\nroot : root node of tree to prune.\nnode_names: vector of Node objects to be removed from tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.prune_tree-Union{Tuple{T}, Tuple{T, Vector{String}}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.prune_tree","text":"prune_tree(root::T, node_names::Vector{String})::T where T<:AbstractNode\n\nThis function removes specific nodes, including their descendants, from a tree.\n\nroot : root Node of tree to prune.\nnode_names : vector of strings, used to specify nodes to remove.\n\n\n\n\n\n","category":"method"},{"location":"basics/#Tree-Search","page":"Basics","title":"Tree Search","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Modules = [MCPhyloTree]\nPages = [\"Basics/Tree_Search.jl\"]","category":"page"},{"location":"basics/#MCPhyloTree.find_binary-Union{Tuple{T}, Tuple{T, String}} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.find_binary","text":"find_binary(root::T, bin::String)::T where T<:AbstractNode\n\nFind a node by its binary representation. The function assumes that the node is present in the tree.\n\nDo not use this function if you are unsure whether the node is in the tree at all.\n\nReturns a reference to the desired Node.\n\nroot : root Node of tree to search.\nbin : binary representation of desired Node as a String.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_by_binary-Tuple{GeneralNode, String}","page":"Basics","title":"MCPhyloTree.find_by_binary","text":"find_by_binary(tree::GeneralNode, bin::String)\n\nAlias for find_binary.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_by_name-Tuple{GeneralNode, AbstractString}","page":"Basics","title":"MCPhyloTree.find_by_name","text":"find_by_name(tree::GeneralNode, name::AbstractString)\n\nAlias for find_name.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_by_num-Tuple{GeneralNode, Int64}","page":"Basics","title":"MCPhyloTree.find_by_num","text":"find_by_num(tree::GeneralNode, num::Int64)\n\nAlias for find_num.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_name-Union{Tuple{S}, Tuple{T}, Tuple{T, S, Vector{T}}} where {T<:AbstractNode, S<:AbstractString}","page":"Basics","title":"MCPhyloTree.find_name","text":"find_name(root::T, name::S, rn::Vector{T})::Bool where {T<:AbstractNode, S<:AbstractString}\n\nDo a post order traversal to find the node corresponding to the name.\n\nReturns true if node is found, false otherwise. Desired Node is pushed to rn.\n\nroot : root Node of tree to be searched.\nname : name of desired Node.\nrn : Vector of Nodes; desired Node is pushed to this vector when found.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_name-Union{Tuple{S}, Tuple{T}, Tuple{T, S}} where {T<:AbstractNode, S<:AbstractString}","page":"Basics","title":"MCPhyloTree.find_name","text":"find_name(root::T, name::S)::T  where {T<:AbstractNode, S<:AbstractString}\n\nFind a node by its name. Returns reference to Node.\n\nroot : root Node of tree to be searched.\nname : name of desired Node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_num-Union{Tuple{I}, Tuple{T}, Tuple{T, I, Vector{T}}} where {T<:AbstractNode, I<:Integer}","page":"Basics","title":"MCPhyloTree.find_num","text":"find_num(root::T, num::Int64, rn::Vector{T})::Bool  where T<:AbstractNode\n\nDo a post order traversal to find the node corresponding to the num.\n\nReturns true if node is found, false otherwise. Desired Node is pushed to rn.\n\nroot : root Node of tree to be searched.\nnum : number of desired Node.\nrn : Vector of Nodes; desired Node is pushed to this vector when found.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_num-Union{Tuple{I}, Tuple{T}, Tuple{T, I}} where {T<:AbstractNode, I<:Integer}","page":"Basics","title":"MCPhyloTree.find_num","text":"find_num(root::T, num::Int64)  where T<:AbstractNode\n\nFind a node by its number. The function assumes that the node is present in the tree.\n\nDo not use this function if you are unsure whether the node is in the tree at all.\n\nReturns reference to Node.\n\nroot : root Node of tree to be searched.\nnum : number of desired Node.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.find_root-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.find_root","text":"find_root(node::T)::T where T <: GeneralNode\n\nFinds the root of tree indicated by Node.\n\nReturns reference to root Node of the tree.\n\nnode : Node in Tree of interest.\n\n\n\n\n\n","category":"method"},{"location":"basics/#Tree-Traversal","page":"Basics","title":"Tree Traversal","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Modules = [MCPhyloTree]\nPages = [\"Basics/Tree_Traversal.jl\"]","category":"page"},{"location":"basics/#MCPhyloTree.get_leaves-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.get_leaves","text":"get_leaves(root::T) where T<:AbstractNode\n\nThis function returns the leaves of a tree. Only the root node needs to be supplied.\n\nReturns an Iterator over leaf Nodes.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.level_order-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.level_order","text":"level_order(node::T) where T<:GeneralNode\n\nThis function does level order traversal. Only the root node needs to be supplied.\n\nReturns a level order iterator.\n\nnode : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.post_order-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.post_order","text":"post_order(root::T) where T<:GeneralNode\n\nThis function does post order traversal. Only the root node needs to be supplied.\n\nReturns a post order iterator.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#MCPhyloTree.pre_order-Tuple{T} where T<:GeneralNode","page":"Basics","title":"MCPhyloTree.pre_order","text":"pre_order(root::T) where T<:GeneralNode\n\nThis function does pre order traversal. Only the root node needs to be supplied.\n\nReturns a preoder Iterator.\n\nroot : root Node of tree.\n\n\n\n\n\n","category":"method"},{"location":"basics/#Tree-Representations","page":"Basics","title":"Tree Representations","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"newick(root::T) where T<:AbstractNode","category":"page"},{"location":"basics/#MCPhyloTree.newick-Tuple{T} where T<:AbstractNode","page":"Basics","title":"MCPhyloTree.newick","text":"newick(root::T)::String  where T<:AbstractNode\n\nCreates a newick representation of the tree.\n\nReturns a properly formatted newick String.\n\nnode : root node of tree used to create the newick string.\n\n\n\n\n\n","category":"method"},{"location":"plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Trees can be plot using the plot function from Plots.jl. Additionally, there is a function to print an ascii-art version of the tree to the console.","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Modules = [MCPhyloTree]\nPages   = [\"Plotting/ascii.jl\"]\nFilter =","category":"page"},{"location":"plotting/#MCPhyloTree.print_ascii-Tuple{N} where N<:AbstractNode","page":"Plotting","title":"MCPhyloTree.print_ascii","text":"function print_ascii(root::N) where N<:AbstractNode\n\nPrints the ASCII representation of the tree. Adapted for Julia from the ETE toolkit implementation.\n\nroot: Root node of tree to print.\n\n\n\n\n\n","category":"method"},{"location":"building/#Tree-Building-and-Transformations","page":"Building","title":"Tree Building & Transformations","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"The tree building methods listed here ensure that the nodes of the tree(s) they build are fully initialized, i.e. they have a unique number, binary representation and a height. Therefore there is no need to run initialize_tree! or update_tree! after running them.","category":"page"},{"location":"building/#Matrix-Representation","page":"Building","title":"Matrix Representation","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"Modules = [MCPhyloTree]\nPages = [\"Building/Tree2Matrix.jl\"]","category":"page"},{"location":"building/#MCPhyloTree.leave_incidence_matrix-Tuple{G} where G<:AbstractNode","page":"Building","title":"MCPhyloTree.leave_incidence_matrix","text":"function leave_incidence_matrix(root::G)::Matrix{Float64} where {G<:AbstractNode}\n\nCalculate the incidence matrix of the tree whos root node is root For a tree with m leaves and n vertecies this function returns an m times n matrix L, where L_ij = 1 if vertex j is on the path from leave i to the root of the tree and 0 otherwise.\n\nReturns leave incidence matrix.\n\nroot : Root node of the tree\n\n\n\n\n\n","category":"method"},{"location":"building/#MCPhyloTree.to_covariance-Union{Tuple{T}, Tuple{N}, Tuple{N, Vector{T}}} where {N<:AbstractNode, T<:Real}","page":"Building","title":"MCPhyloTree.to_covariance","text":"to_covariance(tree::N, blv::Array{T})::Array{T,2} where {N<:AbstractNode,T<: Real}\n\nCalcualte the variance-covariance matrix from tree. An entry (i,j) of the matrix is defined as the length of the path connecting the latest common ancestor of i and j with the root of the tree.\n\nReturns an Array of Real numbers.\n\ntree : Node in tree of interest.\nblv : branchlength vector of tree.\n\n\n\n\n\n","category":"method"},{"location":"building/#MCPhyloTree.to_df-Tuple{GeneralNode}","page":"Building","title":"MCPhyloTree.to_df","text":"to_df(root::GeneralNode)::Tuple{Array{Float64}, Vector{String}}\n\nThis function returns a matrix representation of the tree structure and a vector with the column names. The entry mat[i,j] is the length of the edge connecting node i with node j. Returns Tuple containing the matrix and a vector of names.\n\nroot : root of tree used to create matrix represenation.\n\n\n\n\n\n","category":"method"},{"location":"building/#MCPhyloTree.to_distance_matrix-Tuple{T} where T<:AbstractNode","page":"Building","title":"MCPhyloTree.to_distance_matrix","text":"to_distance_matrix(tree::T)::Array{Float64,2} where T <:AbstractNode\n\nCalculate the distance matrix over the set of leaves.\n\nReturns an Array of Floats.\n\ntree : root node of tree used to perform caclulcation.\n\n\n\n\n\n","category":"method"},{"location":"building/#Newick-Parsing","page":"Building","title":"Newick Parsing","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"Modules = [MCPhyloTree]\nPages = [\"Building/ParseNewick.jl\"]","category":"page"},{"location":"building/#MCPhyloTree.ParseNewick-Tuple{String}","page":"Building","title":"MCPhyloTree.ParseNewick","text":"ParseNewick(s::String)::Union{GeneralNode, Array{GeneralNode, 1}}\n\nThis function takes a string - either a filename or a newick string - and reads the file / string to return an array of trees (represented as Node objects). The file should solely  consist of newick tree representations, separated by line. The function checks for proper  newick formatting, and will return an error if the string / file is incorrectly formatted.\n\nNewick string input: Returns the root of the tree represented by the newick string. Filename input: Returns an Array of Nodes; each Node is the root of the tree represented by a newick string in the file.\n\ns : newick string or name of file containing newick strings to parse.\n\n\n\n\n\n","category":"method"},{"location":"building/#Build-Trees-from-Matrices","page":"Building","title":"Build Trees from Matrices","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"MCPhyloTree.from_df\nMCPhyloTree.create_tree_from_leaves\nMCPhyloTree.cov2tree\nMCPhyloTree.from_leave_incidence_matrix","category":"page"},{"location":"building/#MCPhyloTree.from_df","page":"Building","title":"MCPhyloTree.from_df","text":"function from_df(df::Array{T,2}, name_list::Vector{String})::GeneralNode{T, Int64} where T<:Real\n\nThis function takes an adjacency matrix and a vector of names and turns it into a tree. No checks are performed.\n\nReturns the root node of the tree.\n\ndf : matrix with edge weights\nname_list : a list of names such that they match the column indices of the matrix\n\n\n\n\n\n","category":"function"},{"location":"building/#MCPhyloTree.create_tree_from_leaves","page":"Building","title":"MCPhyloTree.create_tree_from_leaves","text":"function create_tree_from_leaves(leaf_nodes::Vector{String}, rooted::Bool=false<:AbstractNode\n\nBuild a random tree from a list of leaf names. The tree is unrooted by default.\n\nReturns the root node of the new tree.\n\nleaf_nodes : A list of strings which are used as the names of the leaves.\nrooted : Boolean indicating if the tree should be rooted\n\n\n\n\n\n","category":"function"},{"location":"building/#MCPhyloTree.cov2tree","page":"Building","title":"MCPhyloTree.cov2tree","text":"function cov2tree(covmat::Array{<:T, 2}, names::Vector{<:AbstractString}, numbers::Vector{Int64}; tol::Real=1e-7)::GeneralNode{T, Int64} where T<:Real\n\nThis function reconstructs a tree from a covariance matrix. It takes a covariance matrix,  a vector of leaf names and a vector of node numbers as mandatory arguments. The order of the two vectors must correspond to the order of rows and columns in the covariance matrix. Optionally, the tol paramter indicates  the boundary below which all values are treated as zero.\n\nReturns the root node of the tree corresponding to the supplied covariance matrix.\n\ncovmat : covariance matrix\nnames : a list of names such that they match the column/row indices of the matrix\nnumbers : a list of Integers such that they match the column/row indices of the matrix\ntol : cut off value below which all values are treated as zero\n\n\n\n\n\n","category":"function"},{"location":"building/#MCPhyloTree.from_leave_incidence_matrix","page":"Building","title":"MCPhyloTree.from_leave_incidence_matrix","text":"from_leave_incidence_matrix(lm::Matrix, names)\n\nBuild the tree which is specified through a leave incidence matrix. The function leave_incidence_matrix from this package creates such a matrix.\n\nReturns the root node of the tree build from the matrix.\n\nlm : leave incidence matrix\nnames : list of names for the leaves (in order of the rows)\n\n\n\n\n\nfrom_leave_incidence_matrix(lm::Matrix, names, blv::Vector{<:AbstractFloat})\n\nBuild the tree which is specified through a leave incidence matrix. The function leave_incidence_matrix from this package creates such a matrix. This function additionally takes a vector of branch lengths, which are assigend to the reconstructed tree.\n\nReturns the root node of the tree build from the matrix.\n\nlm : leave incidence matrix\nnames : list of names for the leaves (in order of the rows)\nblv : vector of branch lengths used for this tree\n\n\n\n\n\n","category":"function"},{"location":"building/#Tree-Estimation-from-Matrices","page":"Building","title":"Tree Estimation from Matrices","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"MCPhyloTree.neighbor_joining\nMCPhyloTree.upgma","category":"page"},{"location":"building/#MCPhyloTree.neighbor_joining","page":"Building","title":"MCPhyloTree.neighbor_joining","text":"neighbor_joining(dm::Array{Float64,2}, Array{String,1})\n\nThis function returns a phylogenetic tree by using neighbor-joining based on a given distance matrix and an array of leaf names.\n\nReturns a node of the resulting tree, from which it can be traversed.\n\ndm : Matrix used to create Tree.\nleaf_names : Array containing names of leaf nodes.\n\n\n\n\n\nneighbor_joining(dm::Array{Float64,2})\n\nThis function returns a phylogenetic tree by using neighbor-joining based on a given distance matrix. Creates an array of nodes to be used as leaves.\n\nReturns a node of the resulting tree, from which it can be traversed.\n\ndm : Matrix from which to create tree.\n\n\n\n\n\n","category":"function"},{"location":"building/#MCPhyloTree.upgma","page":"Building","title":"MCPhyloTree.upgma","text":"upgma(dm::Array{Float64,2}, Array{String,1})\n\nThis function returns a phylogenetic tree by using UPGMA based on a given distance matrix and an array of leaf names.\n\nReturns a node of the resulting tree, from which it can be traversed.\n\ndm : Matrix from which to create the tree.\nleaf_names : array of strings containing names of leaf nodes.\n\n\n\n\n\nupgma(dm::Array{Float64,2})\n\nThis function returns a phylogenetic tree by using UPGMA based on a given distance matrix. Creates an array of nodes to be used as leaves.\n\nReturns a node of the resulting tree, from which it can be traversed.\n\ndm : Matrix from which to create the tree.\n\n\n\n\n\n","category":"function"},{"location":"building/#Consensus-Tree-computation","page":"Building","title":"Consensus Tree computation","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"MCPhyloTree.majority_consensus_tree\nMCPhyloTree.loose_consensus_tree\nMCPhyloTree.greedy_consensus_tree","category":"page"},{"location":"building/#MCPhyloTree.majority_consensus_tree","page":"Building","title":"MCPhyloTree.majority_consensus_tree","text":"majority_consensus_tree(trees::Vector{T}, percentage::Float64=0.5)\n    ::T where T<:AbstractNode\n\nConstruct the majority rule consensus tree from a set of trees that share the same leafset. By default the output tree includes clusters that occur in over 50% of the trees. This can be customized when calling the function. The function returns the root node of the majority consensus tree, from which it can be traversed. The algorithm is based on section 3 and 6.1 of:\n\nJesper Jansson, Chuanqi Shen, and Wing-Kin Sung. 2016. Improved algorithms for constructing consensustrees. J. ACM 63, 3, Article 28 (June 2016), 24 pages https://dl.acm.org/doi/pdf/10.1145/2925985\n\n\n\n\n\n","category":"function"},{"location":"building/#MCPhyloTree.loose_consensus_tree","page":"Building","title":"MCPhyloTree.loose_consensus_tree","text":"loose_consensus_tree(trees::Vector{T})::T where T<:AbstractNode\n\nConstruct the loose consensus tree from a set of trees that share the same leafset. I.e. a tree with all the clusters that appear in at least one tree and are compatible with all trees. Returns the root node of the loose consensus tree, from which it can be traversed. This algorithm is based on section 4 and 6.1 of:\n\nJesper Jansson, Chuanqi Shen, and Wing-Kin Sung. 2016. Improved algorithms for constructing consensustrees. J. ACM 63, 3, Article 28 (June 2016), 24 pages https://dl.acm.org/doi/pdf/10.1145/2925985\n\n\n\n\n\n","category":"function"},{"location":"building/#MCPhyloTree.greedy_consensus_tree","page":"Building","title":"MCPhyloTree.greedy_consensus_tree","text":"greedy_consensus_tree(trees::Vector{T})::T where T<:AbstractNode\n\nConstruct the greedy consensus tree from a set of trees that share the same leafset.  Returns the root node of the greedy consensus tree, from which it can be traversed. This algorithm is based on section 5 and 6.1 of:\n\nJesper Jansson, Chuanqi Shen, and Wing-Kin Sung. 2016. Improved algorithms for constructing consensustrees. J. ACM 63, 3, Article 28 (June 2016), 24 pages https://dl.acm.org/doi/pdf/10.1145/2925985\n\n\n\n\n\n","category":"function"},{"location":"building/#Tree-Ladderizing","page":"Building","title":"Tree Ladderizing","text":"","category":"section"},{"location":"building/","page":"Building","title":"Building","text":"Modules = [MCPhyloTree]\nPages = [\"Building/Tree_Ladderizing.jl\"]","category":"page"},{"location":"building/#MCPhyloTree.ladderize_tree!-Union{Tuple{T}, Tuple{T, Bool}} where T<:AbstractNode","page":"Building","title":"MCPhyloTree.ladderize_tree!","text":"ladderize_tree!(root::T, ascending::Bool=true) where T<:AbstractNode\n\nThis function ladderizes a tree inplace, i.e. sorts the nodes on all levels by the count of their descendants.\n\nroot : root Node of tree.\nascending : Boolean, determines whether to sort in ascending (true) or               descending (false) order.\n\n\n\n\n\n","category":"method"},{"location":"building/#MCPhyloTree.ladderize_tree-Union{Tuple{T}, Tuple{T, Bool}} where T<:AbstractNode","page":"Building","title":"MCPhyloTree.ladderize_tree","text":"ladderize_tree(root::T, ascending::Bool=true)::T where T<:AbstractNode\n\nThis function returns a ladderized copy of a tree, i.e. a copy with all the nodes on all levels sorted by the count of their descendants.\n\nroot : root Node of tree.\nascending : Boolean, determines whether to sort in ascending (true) or                descending (false) order.\n\n\n\n\n\n","category":"method"},{"location":"#MCPhyloTree.jl","page":"Index","title":"MCPhyloTree.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"This package provides the basic tree functionality for the MCPhylo.jl package.","category":"page"},{"location":"","page":"Index","title":"Index","text":"In addition this package can be used to do basic tree manipulations for phylogenetic trees, such as plotting, conversion to matrices, manipulations of the tree topology, or the calculation of distances between two trees.","category":"page"},{"location":"#General-Information","page":"Index","title":"General Information","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"In order to use the latest version you can install it directly from its GitHub source.","category":"page"},{"location":"","page":"Index","title":"Index","text":"using Pkg\nPkg.add(\"https://github.com/erathorn/MCPhyloTree.jl\")","category":"page"},{"location":"","page":"Index","title":"Index","text":"The stable version can also be installed via the Julia package manager.","category":"page"},{"location":"","page":"Index","title":"Index","text":"using Pkg\nPkg.add(\"MCPhyloTree\")","category":"page"}]
}
